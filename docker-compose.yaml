  services:
    postgres:
      image: postgres:13
      container_name: app_postgres
      environment:
        POSTGRES_USER: ${DB_USER}
        POSTGRES_PASSWORD: ${DB_PASSWORD}
        POSTGRES_DB: ${DB_NAME}
      volumes:
        - postgres_data:/var/lib/postgresql/data
        - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      ports:
        - "5433:5432"
      healthcheck:
        test: ["CMD", "pg_isready", "-U", "${DB_USER}"]
        interval: 10s
        timeout: 5s
        retries: 3
      networks:
        - app_network

    backend:
      build: ./backend
      container_name: app_backend
      depends_on:
        postgres:
          condition: service_healthy
      environment:
        DB_HOST: postgres
        DB_PORT: 5432
        DB_DATABASE: ${DB_NAME}
        DB_USERNAME: ${DB_USER}
        DB_PASSWORD: ${DB_PASSWORD}
        APP_ENV: local
        APP_KEY: ${APP_KEY}
      volumes:
        - ./backend:/var/www/html
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:9000"]
        interval: 10s
        timeout: 5s
        retries: 3
      networks:
        - app_network

    nginx:
      image: nginx:latest
      container_name: app_nginx
      ports:
        - "8000:80"
      volumes:
        - ./backend:/var/www/html
        - ./backend/nginx.conf:/etc/nginx/conf.d/default.conf
      depends_on:
        backend:
          condition: service_healthy
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost"]
        interval: 10s
        timeout: 5s
        retries: 3
      networks:
        - app_network

    bot:
      build: ./bot
      container_name: app_bot
      depends_on:
        nginx:
          condition: service_healthy
      environment:
        BOT_TOKEN: ${BOT_TOKEN}
        GRAPHQL_API_URL: http://nginx:80/graphql/v1
      volumes:
        - ./bot:/app
      networks:
        - app_network

    adminer:
      image: adminer:latest
      container_name: app_adminer
      ports:
        - "8080:8080"
      environment:
        ADMINER_DEFAULT_SERVER: postgres
      depends_on:
        postgres:
          condition: service_healthy
      networks:
        - app_network

  networks:
    app_network:
      driver: bridge

  volumes:
    postgres_data: